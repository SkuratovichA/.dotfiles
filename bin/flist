#!/usr/bin/env python3

import os
import sys
import argparse
import re

# Function to check if a file matches any of the specified patterns
def match_pattern(file, patterns):
    for pattern in patterns:
        if re.search(pattern, file):
            return True
    return False

# Function to process a target (directory or file)
def process_target(target, patterns, exclude_patterns):

    exclude_patterns += ["__pycache__"]
    if os.path.isdir(target):
        # Process files in the directory
        for root, dirs, files in os.walk(target):
            # Exclude directories that match the exclude patterns
            dirs[:] = [d for d in dirs if not match_pattern(os.path.join(root, d), exclude_patterns)]
            for file in files:
                file_path = os.path.join(root, file)
                # Exclude files that match the exclude patterns
                if not match_pattern(file_path, exclude_patterns) and match_pattern(file_path, patterns):
                    # Check if the file is not a binary
                    if not re.search(r'binary|image|audio|video|x-executable|compressed|zip|ico', os.popen(f'file "{file_path}"').read()):
                        print(file_path)
                        print(f"```{os.path.splitext(file_path)[1][1:]}")
                        with open(file_path, 'r') as f:
                            print(f.read().strip())
                        print("```")
                        print("")
    elif os.path.isfile(target):
        # Process single file
        if not match_pattern(target, exclude_patterns) and match_pattern(target, patterns):
            # Check if the file is not a binary
            if not re.search(r'binary|image|audio|video|x-executable|compressed|zip', os.popen(f'file "{target}"').read()):
                print(target)
                print(f"```{os.path.splitext(target)[1][1:]}")
                with open(target, 'r') as f:
                    print(f.read())
                print("```")
                print("")
    else:
        print(f"Error: Invalid target '{target}'")

# Parse command-line arguments
parser = argparse.ArgumentParser(description='Process files based on targets and patterns.')
parser.add_argument('-t', '--targets', nargs='+', default=['.'], help='Target directories or files (default: current directory)')
parser.add_argument('-p', '--patterns', nargs='+', default=['.*'], help='Regex patterns for file matching (default: match all files)')
parser.add_argument('-e', '--exclude', nargs='+', default=[], help='Regex patterns for excluding files or directories')
args = parser.parse_args()

# Process each target
for target in args.targets:
    process_target(target, args.patterns, args.exclude)
